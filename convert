#!/usr/bin/python

##
# Author: Caleb Adams
# Github: github.com/piepieninja
# Converts the VisualSFM .nvm file type into the
# OpenSFM .json type
#

import sys
import json

inputFile = ""
outputFile = ""

# TODO argument bools to be added here
verbose = False

# setting up variables
expectValue = False
expectCameras = False
expectPoints = False
expectMeasurements = False
nvmVersion = ""
cameras = 0
points = 0
measurements = 0

cameraFileList = []
pointsXYZList = []
pointsRGBList = []
imageIndexList = []

if (len(sys.argv) == 2): # not verbose, no specified output
    inputFile = sys.argv[1]
elif (len(sys.argv) == 3): # TODO expand arg options
    if (sys.argv[1] == "-v"): # yes verbose, no specified output
        verbose = True
        inputFile = sys.argv[2]
    else: # not verbose, yes specified output
        inputFile = sys.argv[1]
        outputFile = sys.argv[2]
elif (len(sys.argv) == 4): # TODO expand arg options
    if (sys.argv[1] == "-v"): # yes verbose, yes specified output
        verbose = True
    inputFile = sys.argv[2]
    outputFile = sys.argv[3]
else: # letting user know how to structure command input
    print "USAGE: \n> ./convert input.nvm\n> ./convert input.nvm output.json"
    sys.exit(0)

# extract and partition information from the nvm file
with open(inputFile) as f:
    for line in f:
        #print line
        if (nvmVersion == ""): # assumes the file starts with the nvm version
            nvmVersion = line.rstrip('\n')
        elif (line == '\n'): # a new data stream type is to come
            expectValue = True # new data stream type on next line
            expectCameras = False # don't know if cameras are next
            expectPoints = False # don't know if points are next
            expectMeasurements = False # don't know if measurements are next
        elif (cameras == 0 and expectValue): # first time getting to cameras
            expectValue = False # reading in only cameras until finished
            expectCameras = True # reading in only cameras until finished
            cameras = int(line) # extracting number of cameras
        elif (expectCameras): # reading in cameras info
            cameraFileList.append(line[0:line.find(' ')]) # get each camera file location and store it
            # This looks like it ignores the rest of the line?
        elif (points == 0 and expectValue): # reading in points starting with the next line
            expectValue = False # reading in only points unti lfinished
            expectPoints = True # next 
            points = int(line) # extracting number of cameras
        elif (expectPoints): # extracting point information here, but skipping <number of measurements> and <List of Measurements>
            xyz_list = [0.0,0.0,0.0]
            rgb_list = [0.0,0.0,0.0]
            for x in range(0,6): # why is this skipping <number of measurements> <List of Measurements> ?
                p = line.find(' ') # index after next xyz or rgb componenet
                temp = float(line[0:p]) # saving the current xyz or rgb component
                line = line[p+1:] # removing just gottten xyz or rgb component
                if (x < 3): # appending xz components
                    xyz_list[x] = temp
                else: # appending rbg components
                    rgb_list[x-3] = int(temp)
            pointsXYZList.append(xyz_list) # adding xyz componenets of current point to big list
            pointsRGBList.append(rgb_list) # adding rgb components of current point to big list
        elif (measurements == 0 and expectValue): # it looks like this never happens?
            expectValue = False
            expectMeasurements = True
            measurements = int(line) # what are we measuring? half of the nvm file is left out of the json file
        elif (expectMeasurements):  # again, it looks like this never happens
            imageIndexList.append(line[0:line.find(' ')]) # there isn't any information going into this

# finished extracting from nvm file            

if (verbose):
    print "============================>"
    print "Version: " + nvmVersion + "\nCameras: " + str(cameras) + "\nCamera File List: " + str(cameraFileList) + "\nPoints: " + str(points) + "\nXYZ List: " + str(pointsXYZList) + "\nRGB List: " + str(pointsRGBList) + "\nMeasurements: " + str(measurements) + "\nImage Index List: " + str(imageIndexList)
    print "============================>"

# build json here:
cameras_json = [] # this program currently treats cameras and shots as the same thing
shots_json = [] # this program currently treats cameras and shots as the same thing
points_json = []

# TODO detect camera data
camera_str = "\"cameras\": {\n}"

# TODO detect more shots data
for x in range(0, cameras + measurements):
    str_x = ""
    if (x < cameras): # adding cameras to json file
        str_x = str(cameraFileList[x])
    else: # adding images to json file
        str_x = str(imageIndexList[x-cameras])
    shots_json.append("\"" + str_x + "\":{}") # why are we appending shots? shouldn't cameras to into cameras, and images go into shots?
shots_str = str(shots_json)[2:len(str(shots_json)) - 2]
# making the output readable
shots_str = shots_str.replace("\'\"", "\"")
shots_str = shots_str.replace("\\\'", "\"")
shots_str = shots_str.replace("}\',", "},\n")
shots_str = "\"shots\": {\n" + shots_str + "\n}"

# TODO detect more point data
for x in range(0,points):
    str_x = "\"" + str(x+1) + "\": " # add 1 so we don't have to index image count at 0
    points_json.append(str_x + str({"color": pointsRGBList[x], "reprojection_error": 0.0, "coordinates": pointsXYZList[x]}))
points_str = str(points_json)[2:len(str(points_json)) - 2]
# making the output readable
points_str = points_str.replace("\'\"", "\"")
points_str = points_str.replace("\\\'", "\"")
points_str = points_str.replace("}\',", "},\n")
points_str = "\"points\": {\n" + points_str + "\n}"

# construct the final string
json_str = "[{" + camera_str + "," + shots_str + "," + points_str + "}]"

if (verbose):
    print "json: \n" + json_str

# output the string to a file
if (outputFile == ""): # no specified output
    json_file = open(inputFile + ".json", "w")
else: # yes specified output
    json_file = open(outputFile, "w")

json_file.write(json_str)
json_file.close()
